@page "/issue-items"
@attribute [Authorize(Roles = "Administrator,Inventory Manager")]
@using MudBlazor
@using UniformesSystem.Web.Services
@using UniformesSystem.Web.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject WarehouseMovementService WarehouseMovementService
@inject ItemService ItemService
@inject EmployeeService EmployeeService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Issue Items to Employees - Uniformes Management System</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Issue Items to Employees</MudText>

<MudCard Elevation="4">
    <MudCardContent>
        <EditForm Model="@_issuance" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudSelect T="int?" Label="Employee" Required="true" 
                              @bind-Value="_issuance.EmployeeId"
                              HelperText="Select the employee to receive items"
                              OnChanged="EmployeeChanged">
                        @foreach (var employee in _employees)
                        {
                            <MudSelectItem Value="@employee.Id">@employee.Name - Group: @employee.GroupName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    @if (_selectedEmployee != null)
                    {
                        <MudPaper Class="pa-4" Elevation="0" Outlined="true">
                            <MudText Typo="Typo.subtitle1"><b>Employee Type:</b> @_selectedEmployee.EmployeeTypeName</MudText>
                            <MudText Typo="Typo.subtitle1"><b>Group:</b> @_selectedEmployee.GroupName</MudText>
                        </MudPaper>
                    }
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="_issuance.Notes" 
                                 Label="Notes" 
                                 Lines="2"
                                 HelperText="Optional notes for this issuance" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudDivider />
                    <MudText Typo="Typo.h6" Class="my-4">Items to Issue</MudText>
                    
                    @if (_issuance.Details.Any())
                    {
                        <MudTable Items="@_issuance.Details" Hover="true" Dense="true" Class="mb-4">
                            <HeaderContent>
                                <MudTh>Item</MudTh>
                                <MudTh>Size</MudTh>
                                <MudTh>Quantity</MudTh>
                                <MudTh>Action</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="detailItem">
                                <MudTd DataLabel="Item">@GetItemName(detailItem.ItemId)</MudTd>
                                <MudTd DataLabel="Size">@GetItemSize(detailItem.ItemId)</MudTd>
                                <MudTd DataLabel="Quantity">
                                    <MudNumericField @bind-Value="detailItem.Quantity" Min="1" Max="999" />
                                </MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                 Color="Color.Error"
                                                 Size="Size.Small" 
                                                 OnClick="@(() => RemoveItem(detailItem))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    
                    <MudCard Outlined="true" Class="pa-3">
                        <MudGrid>
                            <MudItem xs="12" md="8">
                                <MudSelect T="int" Label="Item" 
                                          @bind-Value="_selectedItemId"
                                          Disabled="@(!_issuance.EmployeeId.HasValue)">
                                    @foreach (var item in _filteredItems)
                                    {
                                        <MudSelectItem Value="@item.Id">@item.Name - Size: @item.SizeValue</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudNumericField @bind-Value="_itemQuantity"
                                               Label="Quantity"
                                               Min="1" 
                                               Disabled="@(!_issuance.EmployeeId.HasValue)" />
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end">
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Secondary" 
                                         OnClick="AddItemToIssuance"
                                         Disabled="@(!IsItemSelectionValid())">
                                    Add Item
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudCard>
                </MudItem>
                
                @if (_validationErrors.Any())
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Error" Class="mt-4">
                            <ul class="mb-0">
                                @foreach (var error in _validationErrors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </MudAlert>
                    </MudItem>
                }
                
                <MudItem xs="12" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Text"
                             Color="Color.Default"
                             OnClick="@(() => NavigationManager.NavigateTo("/warehouse-movements"))"
                             Class="mr-2">
                        Cancel
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit"
                             Variant="Variant.Filled" 
                             Color="Color.Primary"
                             Disabled="@(!IsFormValid())">
                        Issue Items
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudCardContent>
</MudCard>

@if (_showConfirmation)
{
    <MudDialog Open="@_showConfirmation">
        <DialogContent>
            <MudText>Please confirm that you want to issue the following items:</MudText>
            <MudList T="string" Dense="true" Class="mt-3">
                @foreach (var detail in _issuance.Details)
                {
                    <MudListItem T="string" Icon="@Icons.Material.Filled.CheckBox" Value="@detail.ItemId.ToString()">
                        @GetItemName(detail.ItemId) (@GetItemSize(detail.ItemId)) - Quantity: @detail.Quantity
                    </MudListItem>
                }
            </MudList>
            <MudText Typo="Typo.subtitle2" Class="mt-3">
                To: @(_selectedEmployee?.Name)
            </MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(() => _showConfirmation = false)">Cancel</MudButton>
            <MudButton Color="Color.Primary" 
                     Variant="Variant.Filled"
                     OnClick="@ConfirmIssuance">
                Confirm
            </MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    private WarehouseMovementDto _issuance = new()
    {
        Date = DateTime.Today,
        Details = new List<WarehouseMovementDetailDto>()
    };

    private EmployeeDto? _selectedEmployee;
    private List<EmployeeDto> _employees = new();
    private List<ItemDto> _allItems = new();
    private List<ItemDto> _filteredItems = new();
    private List<string> _validationErrors = new();
    private bool _showConfirmation;
    private int _selectedItemId;
    private int _itemQuantity = 1;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
        await LoadItems();
    }
    
    private async Task LoadEmployees()
    {
        try
        {
            _employees = await EmployeeService.GetAllEmployeesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading employees: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task LoadItems()
    {
        try
        {
            _allItems = await ItemService.GetItemsAsync();
            _filteredItems = _allItems.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading items: {ex.Message}", Severity.Error);
        }
    }

    private async Task EmployeeChanged(int? employeeId)
    {
        if (employeeId.HasValue)
        {
            _selectedEmployee = _employees.FirstOrDefault(e => e.Id == employeeId.Value);
            
            if (_selectedEmployee != null)
            {
                _filteredItems = _allItems
                    .Where(i => IsItemAllowedForEmployeeType(i, _selectedEmployee.EmployeeTypeId))
                    .ToList();
                    
                var itemsToRemove = _issuance.Details
                    .Where(d => !_filteredItems.Any(i => i.Id == d.ItemId))
                    .ToList();
                    
                foreach (var item in itemsToRemove)
                {
                    _issuance.Details.Remove(item);
                }
            }
        }
        else
        {
            _selectedEmployee = null;
            _filteredItems = new List<ItemDto>();
            _issuance.Details.Clear();
        }
    }
    
    private bool IsItemAllowedForEmployeeType(ItemDto item, int employeeTypeId)
    {
        
        string itemName = item.Name?.ToLower() ?? "";
        
        if (itemName.Contains("common") || itemName.Contains("all"))
            return true;
            
        if (employeeTypeId == 1 && (itemName.Contains("union") || itemName.Contains("work")))
            return true;
            
        if (employeeTypeId == 2 && (itemName.Contains("admin") || itemName.Contains("office")))
            return true;
            
        return item.Id % 2 == employeeTypeId % 2;
    }

    private string GetItemName(int itemId)
    {
        return _allItems.FirstOrDefault(i => i.Id == itemId)?.Name ?? "Unknown Item";
    }

    private string GetItemSize(int itemId)
    {
        return _allItems.FirstOrDefault(i => i.Id == itemId)?.SizeValue ?? "Unknown Size";
    }
    
    private void AddItemToIssuance()
    {
        if (_selectedItemId <= 0 || _itemQuantity <= 0)
            return;
            
        var existingItem = _issuance.Details.FirstOrDefault(d => d.ItemId == _selectedItemId);
        
        if (existingItem != null)
        {
            existingItem.Quantity += _itemQuantity;
        }
        else
        {
            _issuance.Details.Add(new WarehouseMovementDetailDto
            {
                ItemId = _selectedItemId,
                Quantity = _itemQuantity
            });
        }
        
        _selectedItemId = 0;
        _itemQuantity = 1;
    }
    
    private void RemoveItem(WarehouseMovementDetailDto detail)
    {
        _issuance.Details.Remove(detail);
    }
    
    private bool IsItemSelectionValid()
    {
        return _selectedItemId > 0 && _itemQuantity > 0 && _issuance.EmployeeId.HasValue;
    }
    
    private bool IsFormValid()
    {
        return _issuance.EmployeeId.HasValue && _issuance.Details.Any();
    }
    
    private async Task HandleValidSubmit()
    {
        _validationErrors.Clear();
        
        if (!_issuance.EmployeeId.HasValue)
        {
            _validationErrors.Add("Employee selection is required");
            return;
        }
        
        if (!_issuance.Details.Any())
        {
            _validationErrors.Add("At least one item must be selected");
            return;
        }

        _showConfirmation = true;
    }
    
    private async Task ConfirmIssuance()
    {
        _showConfirmation = false;
        
        try
        {
            var success = await WarehouseMovementService.CreateMovementAsync(_issuance);
            if (success)
            {
                Snackbar.Add("Items issued successfully", Severity.Success);
                NavigationManager.NavigateTo("/warehouse-movements");
            }
            else
            {
                Snackbar.Add("Failed to issue items", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}
